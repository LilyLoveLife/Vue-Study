1. 使用：对象，对象的属性是函数，函数返回一个值
computed: {
  projectId () {
     return this.$route.params.id || 0
  },
}
computed: {
  projectId: {
      get () {
        return this.$route.params.id || 0
      },
      set (newVal) {
        
      },
      cache: false, // 默认为undefined， 判断时候用cache !== false, 不进行类型转换，故undefined为默认缓存
  },
}


3. 可缓存
计算属性在初始化的时候，实例化Watcher以将计算属性观察化，传参lazy:true，即计算属性默认缓存。
当计算属性依赖的数据发生变化，notify调用watcher的update方法，因为lazy为true，设置dirty为true，且不执行更新。
当使用该计算属性时，调用它的getter，getter中被劫持：因为之前被观察者变化设置了该计算属性的watcher.dirty为true,所以需要重新计算watcher.evaluate()。
若之前被观察者没有变化，则该计算属性的watcher.dirty仍然为false，直接用上一次的值watcher.value。
initComputed (vm, computed) {
  vm.computedWatcher = Object.create(null)
  for (let key in computed) {
    let getter = typeOf computed[key] === 'function' ? computed[key] : computed[key].get
    let watcher = new Watcher(vm, getter, {lazy: true}) // 自己对别人的依赖，加入别人的deps
    getter = function () {
      return function computedGetter() {
        if (watcher.dirty) { // 若依赖的值发生变化，则重新计算watcher.value，计算后，设置dirty为false
          watcher.evaluate() // 重新计算，即更新watcher.value
        }
        watcher.depend() // 收集依赖
        return watcher.value // 返回watcher
      }
    }
     Object.defineProperty(vm, key, gettter) // 别人对自己的依赖，将别人加入自己的deps
  }
}

class Watcher {
  constructor () {
    this.lazy = lazy
    this.getter = expOrFn    // expOrFn
    this.value = this.lazy ? undefined : this.get()
  }
  get () {
    try {
      value = this.getter.call(vm, vm) // 调用getter，会访问expOrFn中的各个数据，从而使得自身加入了各个数据的依赖deps中
    } catch () {
    } finally() {}
    return value
  }
  evaluate () {
    this.value = this.get()       // expOrFn
    this.dirty = false
  }
  
}
